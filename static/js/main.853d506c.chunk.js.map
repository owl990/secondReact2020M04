{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PostControlPanel","props","onClick","addPost","removePost","AddPostPanel","objTitle","React","createRef","objContent","fileUploader","useState","imgSelected","setImgSelected","type","id","onChange","undefined","current","files","console","log","name","URL","createObjectURL","ref","accept","style","display","className","placeholder","src","alt","click","callback","value","App","isAddingPost","setIsAddingPost","listPostInfo","setListPostInfo","strTitle","strContent","imgFile","currentTimestamp","Math","floor","Date","now","concat","length","lastId","filter","item","map","key","borderStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAIA,SAASA,EAAiBC,GACtB,OACA,6BACE,4BAAQC,QAASD,EAAME,SAAvB,YACA,4BAAQD,QAASD,EAAMG,YAAvB,gBAKN,SAASC,EAAaJ,GACpB,IAAMK,EAAWC,IAAMC,YACjBC,EAAaF,IAAMC,YACnBE,EAAeH,IAAMC,YAHA,EAIWD,IAAMI,SAAS,MAJ1B,mBAIpBC,EAJoB,KAIPC,EAJO,KA0B3B,OACE,6BACE,2BAAOC,KAAK,OAAOC,GAAG,cAAcC,SAZxC,gBACMC,IAAcP,EAAaQ,QAAQC,MAAM,GAC3CC,QAAQC,IAAI,oCAGZD,QAAQC,IAAI,kBAAoBX,EAAaQ,QAAQC,MAAM,GAAGG,MAC9DT,EAAeU,IAAIC,gBAAgBd,EAAaQ,QAAQC,MAAM,OAMFM,IAAKf,EAAcgB,OAAO,UAAUC,MAAO,CAACC,QAAQ,UAChH,0BAAMC,UAAU,YAAhB,UACA,2BAAOJ,IAAKnB,IACZ,0BAAMuB,UAAU,YAAhB,YACA,8BAAUC,YAAY,wBAAwBL,IAAKhB,IAClDG,GAAe,0BAAMiB,UAAU,YAAhB,kBACfjB,GAAe,yBAAKmB,IAAKnB,EAAaoB,IAAI,YAE3C,yBAAKH,UAAU,YACb,4BAAQ3B,QA/Bd,WACEkB,QAAQC,IAAI,gBACZX,EAAaQ,QAAQe,UA6BjB,UACA,4BAAQ/B,QA3Bd,WACEkB,QAAQC,IAAI,eACZpB,EAAMiC,SAAS5B,EAASY,QAAQiB,MAAO1B,EAAWS,QAAQiB,MAAOvB,KAyB7D,YA2DOwB,MArDf,WAAgB,IAAD,EAC2BzB,oBAAS,GADpC,mBACN0B,EADM,KACQC,EADR,OAE2B3B,mBAAS,IAFpC,mBAEN4B,EAFM,KAEQC,EAFR,KA8Bb,OACE,yBAAKX,UAAU,OAGfQ,EACE,kBAAChC,EAAD,CAAc6B,SAhBlB,SAA4BO,EAAUC,EAAYC,GAChD,IAAIC,EAAmBC,KAAKC,MAAMC,KAAKC,MAAQ,KAC/CR,EAAgBD,EAAaU,OAAO,CAClC,GAAML,EACN,MAASH,EACT,QAAWC,EACX,MAASC,KAEXL,GAAgB,MASd,kBAACtC,EAAD,CAAkBG,QA/BtB,WACEiB,QAAQC,IAAI,YACZiB,GAAgB,IA6BsBlC,WA1BxC,WACE,GAAG,IAAMmC,EAAaW,OAAtB,CAIA,IAAIC,EAASZ,EAAaA,EAAaW,OAAS,GAAnC,GACbV,EAAgBD,EAAaa,QAAO,SAAAC,GAAI,OAAIA,EAAKtC,KAAOoC,WAJtD/B,QAAQC,IAAI,0CA2BZgB,GAAgB,EAAIE,EAAaW,QACjC,6BACGX,EAAae,KAAI,SAAAD,GAAI,OACpB,yBAAKE,IAAKF,EAAI,GAAQ1B,MAAO,CAAC6B,YAAa,WACzC,0BAAM3B,UAAU,YAAYwB,EAAI,OAChC,0BAAMxB,UAAU,YAAYwB,EAAI,gBCzFxBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.853d506c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n\nfunction PostControlPanel(props) {\n    return (\n    <div>\n      <button onClick={props.addPost}>Add Post</button>\n      <button onClick={props.removePost}>Remove Post</button>\n    </div>\n    );\n}\n\nfunction AddPostPanel(props) {\n  const objTitle = React.createRef();\n  const objContent = React.createRef();\n  const fileUploader = React.createRef();\n  const [imgSelected, setImgSelected] = React.useState(null);\n\n  function uploadImage() { \n    console.log(\"Upload Image\"); \n    fileUploader.current.click();\n  }\n\n  function submitPost() { \n    console.log(\"Submit Post\"); \n    props.callback(objTitle.current.value, objContent.current.value, imgSelected);\n  }\n\n  function fileSelected() {\n    if (undefined === fileUploader.current.files[0]) {\n      console.log(\"Did not select file, do nothing\");\n    }\n    else {\n      console.log(\"File selected: \" + fileUploader.current.files[0].name);\n      setImgSelected(URL.createObjectURL(fileUploader.current.files[0]));\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"file\" id=\"selectdFile\" onChange={fileSelected} ref={fileUploader} accept=\"image/*\" style={{display:'none'}}></input>\n      <span className=\"Add-Post\">Title:</span>\n      <input ref={objTitle}></input>\n      <span className=\"Add-Post\">Content:</span>\n      <textarea placeholder=\"Please input Content.\" ref={objContent}></textarea>\n      {imgSelected && <span className=\"Add-Post\">Image Preview:</span>}\n      {imgSelected && <img src={imgSelected} alt=\"Preview\"></img>}\n        \n      <div className=\"Add-Post\">\n        <button onClick={uploadImage}>upload</button>\n        <button onClick={submitPost}>submit</button>\n      </div>\n    </div>\n    );\n}\n\nfunction App() {\n  const [isAddingPost, setIsAddingPost] = useState(false);\n  const [listPostInfo, setListPostInfo] = useState([]);\n  //const [lastPostTimestamp, setLastPostTimestamp] = useState(null);\n\n  function addPost() {\n    console.log(\"Add Post\");\n    setIsAddingPost(true);\n  }\n\n  function removePost() { \n    if(0 === listPostInfo.length) {\n      console.log(\"List of post is empty, do nothing.\");\n      return;\n    }\n    var lastId = listPostInfo[listPostInfo.length - 1]['id'];\n    setListPostInfo(listPostInfo.filter(item => item.id !== lastId));\n  }\n\n  function submitPostCallBack(strTitle, strContent, imgFile) {\n    var currentTimestamp = Math.floor(Date.now() / 1000);\n    setListPostInfo(listPostInfo.concat({\n      \"id\": currentTimestamp,\n      \"title\": strTitle,\n      \"content\": strContent,\n      \"image\": imgFile\n    }));\n    setIsAddingPost(false);\n  };\n\n  return (\n    <div className=\"App\"> \n\n    {\n    isAddingPost\n    ? <AddPostPanel callback={submitPostCallBack}/>\n    : <PostControlPanel addPost={addPost} removePost={removePost}/>\n    }\n\n    {!isAddingPost && 0 < listPostInfo.length &&\n      <div>\n        {listPostInfo.map(item => (\n          <div key={item[\"id\"]} style={{borderStyle: \"dashed\"}}>\n            <span className=\"Add-Post\">{item[\"title\"]}</span>\n            <span className=\"Add-Post\">{item[\"content\"]}</span>\n          </div>\n        ))}\n      </div>\n    }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}